// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Installation {
  id              Int              @id @unique @default(autoincrement())
  installation_id Int              @unique @default(autoincrement())
  platform        Platform
  organization    Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  Int?
  token           String
  expiration      String
  type            InstallationType @default(individual)
}

model Organization {
  id               Int                @id @unique @default(autoincrement())
  name             String
  users            User[]
  teams            Team[]
  teamRoles        TeamRole[]
  roles            UserRole[]
  repositories     Repository[]
  installations    Installation[]
  overallUserStats OverallUserStats[]
  monthlyUserStats MonthlyUserStats[]
}

model Team {
  id             Int                 @id @unique @default(autoincrement())
  name           String
  users          User[]
  organizationId Int
  organization   Organization        @relation(fields: [organizationId], references: [id])
  roles          TeamRole[]
  projects       TrackedRepository[]

  @@unique([id, organizationId])
}

model Email {
  id       Int     @id @unique @default(autoincrement())
  name     String  @unique
  verified Boolean @default(false)
  primary  Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
}

model GithubUserAuthorization {
  id     Int    @id @unique @default(autoincrement())
  token  String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model User {
  id            Int                      @id @unique @default(autoincrement())
  name          String
  teams         Team[]
  emails        Email[]
  roles         UserRole[]
  teamRoles     TeamRole[]
  pullRequests  PullRequest[]
  organizations Organization[]
  overallStats  OverallUserStats[]
  monthlyStats  MonthlyUserStats[]
  github        GithubUserAuthorization?
}

model UserRole {
  id             Int          @id @unique @default(autoincrement())
  userId         Int
  organizationId Int
  role           Role
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model TeamRole {
  id             Int          @id @unique @default(autoincrement())
  role           Role
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  teamId         Int
  team           Team         @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model Repository {
  id               Int                 @id @unique @default(autoincrement())
  name             String
  html_url         String
  description      String              @default("")
  language         String              @default("Unknown Language")
  organizationId   Int
  organization     Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  platform         Platform
  api_url          String
  platform_id      Int
  clone_url        String
  tracked          Boolean             @default(false)
  created_at       String
  updated_at       String
  lines            Int                 @default(0)
  commits          Int                 @default(0)
  pullRequests     PullRequest[]
  monthlyUserStats MonthlyUserStats[]
  userStats        OverallUserStats[]
  trackers         TrackedRepository[]

  @@unique([platform_id, platform])
}

model TrackedRepository {
  id           Int        @id @unique @default(autoincrement())
  teamId       Int
  team         Team       @relation(fields: [teamId], references: [id])
  repositoryId Int
  repository   Repository @relation(fields: [repositoryId], references: [id])
  date         DateTime   @default(now()) @db.Timestamptz()

  @@unique([teamId, repositoryId])
}

model OverallUserStats {
  id             Int          @id @unique @default(autoincrement())
  lines          Int
  commits        Int
  date           DateTime     @default(now()) @db.Timestamptz()
  repositoryId   Int
  repository     Repository   @relation(fields: [repositoryId], references: [id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         Int
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, repositoryId])
}

model MonthlyUserStats {
  id             Int          @id @unique @default(autoincrement())
  lines          Int
  commits        Int
  date           DateTime     @default(now()) @db.Timestamptz()
  repositoryId   Int
  repository     Repository   @relation(fields: [repositoryId], references: [id])
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model PullRequest {
  id           Int               @id @unique @default(autoincrement())
  date         DateTime          @db.Timestamptz()
  user         User              @relation(fields: [userId], references: [id])
  userId       Int
  status       PullRequestStatus
  repositoryId Int
  repository   Repository        @relation(fields: [repositoryId], references: [id])
  description  String
}

enum PullRequestStatus {
  open
  merged
  inreview
  declined
}

enum Role {
  admin
  manager
  viewer
}

enum Platform {
  github
  bitbucket
}

enum InstallationType {
  individual
  organization
}

enum RequestMethod {
  GET
  POST
}
